const char *CREATE_TABLES_QUERY =
"CREATE TABLE IF NOT EXISTS Unit (Id INTEGER PRIMARY KEY, Name TEXT);"
"CREATE TABLE IF NOT EXISTS Tenant (Id INTEGER PRIMARY KEY, UnitId INTEGER, Name TEXT,FOREIGN KEY(UnitId) REFERENCES Unit(Id));"
"CREATE TABLE IF NOT EXISTS Receipt (Id INTEGER PRIMARY KEY, Name TEXT, TenantId INTEGER, Cost INTEGER, Date INTEGER, FOREIGN KEY(TenantId) REFERENCES Tenant(Id));"
"CREATE TABLE IF NOT EXISTS  ReceiptTenant (ReceiptId INTEGER, TenantId INTEGER, FOREIGN KEY(ReceiptId) REFERENCES Receipt(Id), FOREIGN KEY(TenantId) REFERENCES Tenant(Id), PRIMARY KEY(TenantId,ReceiptId));";

const char *INSERT_NEW_UNIT_STATEMENT = "INSERT INTO Unit(Name) VALUES(@NAME);";
const char *INSERT_NEW_TENANT_STATEMENT = "INSERT INTO Tenant(UnitId,Name) VALUES (@UNITID,@NAME);";
const char *INSERT_NEW_RECEIPT_STATEMENT = "INSERT INTO Receipt(Name,TenantId,Cost,Date) VALUES(@NAME,@TENANTID,@COST,@DATE);";
const char *INSERT_NEW_RECEIPTTENANT_STATEMENT = "INSERT INTO ReceiptTenant(ReceiptId,TenantId) VALUES(@RECEIPTID,@TENANTID);";
const char *SELECT_UNITS_QUERY = "SELECT * FROM Unit;";
const char *SELECT_TENANTS_BY_UNIT_QUERY = "SELECT * FROM Tenant WHERE UnitId = @UNITID";
const char *SELECT_TENANTS_QUERY = "SELECT * FROM Tenant";
const char *SELECT_RECEIPTS_QUERY = "SELECT * FROM Receipt";
const char *SELECT_RECEIPTS_BY_TENANT_QUERY = "SELECT *  FROM Receipt WHERE TenantId = @TENANTID";
const char *SELECT_MONTHLY_RECEIPTS_PER_TENANT = "SELECT * FROM Receipt WHERE Date BETWEEN @FROM AND @TO WHERE TenantId = @TENANTID;";
const char *SELECT_RECEIPTS_SPLIT_BY_TENANTS = "SELECT ReceiptId, Name, Buyer, TenantId Debtor, Cost Debt, Date FROM(SELECT RT.*, P.TenantId Buyer, P.Name, P.Cost Total, P.Date, P.PerCost Cost FROM ReceiptTenant RT JOIN (SELECT R.*, (R.Cost / COUNT(RT.TenantId)) [PerCost] FROM ReceiptTenant RT JOIN Receipt R on RT.ReceiptId = R.Id GROUP BY RT.ReceiptId) P ON RT.ReceiptId = P.Id) WHERE Buyer != Debtor AND (BUYER = @TENANTID OR Debtor = @TENANTID) ORDER BY ReceiptId ASC;"
